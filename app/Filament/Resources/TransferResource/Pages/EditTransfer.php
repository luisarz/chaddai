<?php

namespace App\Filament\Resources\TransferResource\Pages;

use App\Filament\Resources\TransferResource;
use App\Helpers\KardexHelper;
use App\Models\CashBoxCorrelative;
use App\Models\Inventory;
use App\Models\Sale;
use App\Models\SaleItem;
use App\Models\Transfer;
use App\Models\TransferItems;
use App\Service\GetCashBoxOpenedService;
use Filament\Actions;
use Filament\Actions\Action;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Contracts\Support\Htmlable;
use Livewire\Attributes\On;

class EditTransfer extends EditRecord
{
    protected static string $resource = TransferResource::class;

    protected function getHeaderActions(): array
    {
        return [
        ];
    }

    #[On('refreshTransfer')]
    public function refresh(): void
    {
    }

    public function getTitle(): string|Htmlable
    {
        return '';// TODO: Change the autogenerated stub
    }

    protected function getFormActions(): array
    {
        return [
            Action::make('save')
                ->label('Realizar Traslado')
                ->color('primary')
                ->icon('heroicon-o-check')
                ->action('save')
                ->requiresConfirmation()
                ->extraAttributes([
                    'class' => 'alig', // Tailwind para ajustar el margen alinearlo a la derecha

                ]),

            Action::make('cancelSale')
                ->label('Cancelar venta')
                ->icon('heroicon-o-no-symbol')
                ->color('warning')
                ->requiresConfirmation()
                ->modalHeading('Confirmación!!')
                ->modalSubheading('¿Estás seguro de que deseas cancelar esta venta? Esta acción no se puede deshacer.')
                ->modalButton('Sí, cancelar venta')
                ->action(function (Actions\DeleteAction $delete) {
                    $this->record->delete();
                    TransferItems::where('sale_id', $this->record->id)->delete();
                    $this->redirect(static::getResource()::getUrl('index'));
                }),
        ];
    }

    protected function mutateFormDataBeforeSave(array $data): array
    {
        $data['wherehouse_id'] = auth()->user()->employee->branch_id;
        return $data;
    }

    public function aftersave()//Disminuir el inventario
    {


        $id_transfer = $this->record->id; // Obtener el registro de la compra
        $transfer = Transfer::with('wherehouseFrom', 'wherehouseTo')->find($id_transfer);
        $transferItem = TransferItems::where('transfer_id', $transfer->id)->get();
        $client = $transfer->wherehouseFrom->name;
        $entity = $client;
        $pais = 'Salvadoreña';
        $documnetType = "Traslado #  " . $transfer->transfer_number;

        foreach ($transferItem as $item) {
            $inventory = Inventory::find($item->inventory_id);
            // Verifica si el inventario existe
            if (!$inventory) {
                \Log::error("Inventario no encontrado para el item de compra: {$item->id}");
                continue; // Si no se encuentra el inventario, continua con el siguiente item
            }

            // Actualiza el stock del inventario
            $newStock = $inventory->stock - $item->quantity;
            $inventory->update(['stock' => $newStock]);

            // Crear el Kardex
            $kardex = KardexHelper::createKardexFromInventory(
                $inventory->branch_id, // Se pasa solo el valor de branch_id (entero)
                $transfer->transfer_date, // date
                'Traslado', // operation_type
                $transfer->id, // operation_id
                $item->id, // operation_detail_id
                $documnetType, // document_type
                $transfer->transfer_number, // document_number
                $entity, // entity
                $pais, // nationality
                $inventory->id, // inventory_id
                $inventory->stock + $item->quantity, // previous_stock
                0, // stock_in
                $item->quantity, // stock_out
                $newStock, // stock_actual
                0, // money_in
                $item->quantity * $item->price, // money_out
                $inventory->stock * $item->price, // money_actual
                $item->price, // sale_price
                0 // purchase_price
            );

            // Verifica si la creación del Kardex fue exitosa
            if (!$kardex) {
                \Log::error("Error al crear Kardex para el item de compra: {$item->id}");
            }
        }


        $transfer->update([
            'status_send' => 'Enviado',
        ]);


        // Redirigir después de completar el proceso
        $this->redirect(static::getResource()::getUrl('index'));
    }

}
